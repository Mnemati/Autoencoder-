from leras.layers import Input, Dense
from keras.models import Model
from keras.datasets import mnist
import numpy as np
import matplotlib.pyplot as plt

# prepare dataset
(x_train, _), (x_test, _) = mnist.load_data()

input_img = Input(shape = (784,))

# encoded is the encoded representation of the input
encoded = Dense(32, activation = 'relu')(input_img)

#decoded is the lossy reconstruction of the input
decoded = Dense(784, activation = 'sigmoid')(encoded)

#mapping the input into its reconstruction
autoencoder = Model(input_img, decoded)

#compile the model
autoencoder.compile(optimizer = 'adam', loss = 'binary_crossentropy')
autoencoder.summary()

#model training

#normalizing
x_train = x_train.astype('float32')/255
x_test = x_test.astype('float32')/255
x_train = x_train.reshape((len(x_train), np.prod(x_train.shape[1:])))
x_test = x_test.reshape((len(x_train), np.prod(x_test.shape[1:])))
print(x_train.shape)
print(x_test.shape)

#train the autoencoder

n_epochs = 10
autoencoder.fit(x_train, x_train, epochs = n_epochs, batch_size = 256, shuffle = True, validation_data = (e_test, x_test))

#result visualization
#encode and decode some digits

decoded_img = autoencoder.predict(x_test)

n = 10  # number of digits we want to display
plt.figure(figsize = (20,4))
for i in range(10):
	ax = plt.subplot(2,n,i+1)
	plt.imshow(x_test[i].reshape(28,28))
	plt.gray()
	ax.get_xaxis().set_visible(False)
	ax.get_yaxis().set_visible(False)
plt.show()
